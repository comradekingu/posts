Announcing Weblate

I still get questioned as to why I wrote Weblate instead of staying with an existing solution. Most of this is already addressed in the previous posts, but still it might be worth it to summarize the reasons why once more.

Git integration

None of existing tools integrate with distributed version control. I find the need for this integration somewhat obvious, and necessary. Having the translation system be one of the remote branches makes things really easy to handle for developers. Merging translations is nothing more than a Git merge away.

Translator attribution

I think it is fair to request translators get appropriate attribution for their contributions. Once we rely on Git, the obvious way to do this is through proper authorship of for Git commits being made. This way authors can be found purely using Git, without needing to look for other tools.

Handling several branches

In phpMyAdmin we heavily use branches to maintain stable releases. We want to be able to push translations to both stable and testing branches, without translators having to do the work twice. Weblate automatically pushes changes to all branches. Sub-projects too, they can even be related projects like with Gammu and Wammu.

Displaying context

Most of the tools I tried fail to provide a way to show related source code, even when gettext PO files contain such references. With Weblate this is just a matter of setting up a URL for the viewer, integrating nicely with existing services like Github.

Sane merging of uploaded translations

With Pootle, an incomplete PO file can be uploaded, and it will happily replace the existing one. This is quite dangerous, as you would not notice it is incomplete unless you do some translation validation prior to a release. Weblate merges uploaded translations, unit by unit. It is slower, but generates a minimal diff and also works across branches.

Consistency checks

There are always plenty of things to go wrong in translation. The format of the strings and the translation tool employed should catch these as early as possible. Weblate semi-enforces checks â€” if a check has failed, you will be redirected back to the previous translation to possibly correct it (or mark the check as ignored). At present, state checks are not as good as I would like, but completely modular and easily extended and improved.

Bonus points

While working on Weblate I realized some things could be done even better than originally anticipated. For example, with GitHub webhooks it is possible to receive notifications of upstream repository updates, and merge changes as they appear. This in turn makes for a really live translation process. Git allows writing custom merging drivers, and this can be utilized to get fewer merge conflicts for PO files (usually caused by timestamps in headers), so that's another handy thing you get with Weblate.

Of course there is much more built in, just check the documentation.
